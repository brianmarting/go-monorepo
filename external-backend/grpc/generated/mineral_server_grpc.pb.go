// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: mineral_server.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MineralService_SendStreaming_FullMethodName = "/grpc.MineralService/SendStreaming"
)

// MineralServiceClient is the client API for MineralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MineralServiceClient interface {
	SendStreaming(ctx context.Context, opts ...grpc.CallOption) (MineralService_SendStreamingClient, error)
}

type mineralServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMineralServiceClient(cc grpc.ClientConnInterface) MineralServiceClient {
	return &mineralServiceClient{cc}
}

func (c *mineralServiceClient) SendStreaming(ctx context.Context, opts ...grpc.CallOption) (MineralService_SendStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &MineralService_ServiceDesc.Streams[0], MineralService_SendStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mineralServiceSendStreamingClient{stream}
	return x, nil
}

type MineralService_SendStreamingClient interface {
	Send(*MineralDto) error
	CloseAndRecv() (*MineralResult, error)
	grpc.ClientStream
}

type mineralServiceSendStreamingClient struct {
	grpc.ClientStream
}

func (x *mineralServiceSendStreamingClient) Send(m *MineralDto) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mineralServiceSendStreamingClient) CloseAndRecv() (*MineralResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MineralResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MineralServiceServer is the server API for MineralService service.
// All implementations must embed UnimplementedMineralServiceServer
// for forward compatibility
type MineralServiceServer interface {
	SendStreaming(MineralService_SendStreamingServer) error
	mustEmbedUnimplementedMineralServiceServer()
}

// UnimplementedMineralServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMineralServiceServer struct {
}

func (UnimplementedMineralServiceServer) SendStreaming(MineralService_SendStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStreaming not implemented")
}
func (UnimplementedMineralServiceServer) mustEmbedUnimplementedMineralServiceServer() {}

// UnsafeMineralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MineralServiceServer will
// result in compilation errors.
type UnsafeMineralServiceServer interface {
	mustEmbedUnimplementedMineralServiceServer()
}

func RegisterMineralServiceServer(s grpc.ServiceRegistrar, srv MineralServiceServer) {
	s.RegisterService(&MineralService_ServiceDesc, srv)
}

func _MineralService_SendStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MineralServiceServer).SendStreaming(&mineralServiceSendStreamingServer{stream})
}

type MineralService_SendStreamingServer interface {
	SendAndClose(*MineralResult) error
	Recv() (*MineralDto, error)
	grpc.ServerStream
}

type mineralServiceSendStreamingServer struct {
	grpc.ServerStream
}

func (x *mineralServiceSendStreamingServer) SendAndClose(m *MineralResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mineralServiceSendStreamingServer) Recv() (*MineralDto, error) {
	m := new(MineralDto)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MineralService_ServiceDesc is the grpc.ServiceDesc for MineralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MineralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MineralService",
	HandlerType: (*MineralServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStreaming",
			Handler:       _MineralService_SendStreaming_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "mineral_server.proto",
}
